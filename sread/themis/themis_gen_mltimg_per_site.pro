;+
; Generate a CDF containing the MLT image for ASF per hour per site.
; 
; time. A number for time in UT sec.
; site. A string for site.
;-
;

pro themis_gen_mltimg_per_site, time, site=site, errmsg=errmsg, $
    min_elev=min_elev, height=height, min_lat=min_lat

    compile_opt idl2
    on_error, 0
    errmsg = ''
    
    rad = !dpi/180
    asf_size = 256


    if n_elements(site) eq 0 then begin
        errmsg = handle_error('No input site ...')
        return
    endif
    pre0 = 'thg_'+site+'_'
    pre1 = pre0+'asf_'
    
    ; Minimum MLat of 55 deg to cover the aurora oval.
    if n_elements(height) eq 0 then height = 110d   ; km.
    if n_elements(min_lat) eq 0 then min_lat = 55d  ; deg.
    
    
    dtime = 3600d   ; 1 hour.
    ;dtime = 60d     ; sec. For test purpose.
    time = time[0]
    time = time-(time mod dtime)+[0,dtime]
    
;---Get the MLT image (after compression) loaded to memory.
    themis_read_mltimg_per_site, time, site=site, errmsg=errmsg, $
        min_elev=min_elev, height=height, min_lat=min_lat
    if errmsg ne '' then return

;---Save the data to CDF.

    ; Prepare file name.
    version = 'v01'
    local_root = join_path([default_local_root(),'sdata','themis'])
    base_pattern = 'thg_l1_mltimg_'+site+'_%Y%m%d%H_'+version+'.cdf'
    local_path = join_path([local_root,'thg','l1','mltimg',site,'%Y','%m'])

    local_dir = apply_time_to_pattern(local_path, time[0])
    base_name = apply_time_to_pattern(base_pattern, time[0])
    file = join_path([local_dir,base_name])
    if file_test(local_dir,/directory) eq 0 then file_mkdir, local_dir
    
    ; Create file.
    compress = 4
    ginfo = {$
        title: 'Themis ASI converted to MLT images',$
        text: 'Generated by Sheng Tian at the University of Minnesota'}
    if file_test(file) eq 1 then file_delete, file
    scdfwrite, file, gattribute=ginfo, compress=compress
    
    ; Save support data.
    mltimg_var = pre0+'mltimg'
    get_data, mltimg_var, times, mltimgs & mltimgs = mltimgs[0]
    ntime = n_elements(times)
    img_size = mltimgs[0].image_size
    
    img_xs = smkarthm(-0.5, 0.5, img_size[0], 'n') # (fltarr(img_size[1])+1)
    img_ys = (fltarr(img_size[0])+1) # smkarthm(-0.5, 0.5, img_size[1], 'n')
    img_rs = sqrt(img_xs^2+img_ys^2)
    img_ts = atan(img_xs, -img_ys)  ; gives 0 at midnight, -12/12 at noon.
    
    hour = 12/!dpi
    img_mlts = img_ts*hour
    img_mlats = 90-img_rs*(90-min_lat)
    
    utname = 'ut_sec'
    ainfo = {$
        fieldnam: 'UT time', $
        units: 'sec', $
        var_type: 'support_data'}
    scdfwrite, file, utname, value=times, attribute=ainfo, cdftype='CDF_DOUBLE', compress=0
    
    varname = 'image_size'
    dat = transpose(img_size)
    ainfo = {$
        fieldnam: 'Image size of the MLT image', $
        units: 'pixel', $
        var_type: 'support_data'}
    scdfwrite, file, varname, value=dat, attribute=ainfo, cdftype='CDF_UINT4', compress=0
    
    varname = 'min_lat'
    ainfo = {$
        fieldnam: 'Minimum MLat', $
        units: 'deg', $
        var_type: 'support_data'}
    scdfwrite, file, varname, value=min_lat, attribute=ainfo, cdftype='CDF_FLOAT', compress=0
    
    varname = 'mlt'
    dat = img_mlts
    ainfo = {$
        fieldnam: 'MLT of each pixel', $
        units: 'hr', $
        validmin: -12, $
        validmax: 12, $
        var_type: 'support_data'}
    scdfwrite, file, varname, value=dat, attribute=ainfo, cdftype='CDF_FLOAT', $
        dimvary=[1,1], dimensions=img_size, compress=0
    
    varname = 'mlat'
    dat = img_mlats
    ainfo = {$
        fieldnam: 'MLat of each pixel', $
        units: 'deg', $
        validmin: min_lat, $
        validmax: 90, $
        var_type: 'support_data'}
    scdfwrite, file, varname, value=dat, attribute=ainfo, cdftype='CDF_FLOAT', $
        dimvary=[1,1], dimensions=img_size, compress=0


    ; Save data.
    npixel = 0
    for i=0, ntime-1 do begin
        tmp = n_elements(mltimgs[i].index)
        if npixel lt tmp then npixel = tmp
    endfor
    
    img_index = ulonarr(npixel,ntime)
    img_value = fltarr(npixel,ntime)
    img_elev = fltarr(npixel,ntime)
    for i=0, ntime-1 do begin
        nrec = n_elements(mltimgs[i].index)
        img_index[0:nrec-1,i] = mltimgs[i].index
        img_value[0:nrec-1,i] = mltimgs[i].value
        img_elev[0:nrec-1,i] = mltimgs[i].elev
    endfor
    
    index_name = 'pixel_index'
    dat = temporary(img_index)
    ainfo = {$
        fieldnam: '1-D index for the good pixels', $
        units: '#', $
        depend_0: utname, $
        var_type: 'data'}
    scdfwrite, file, index_name, value=dat, attribute=ainfo, cdftype='CDF_UINT4', $
        compress=compress, dimvary=[1], dimensions=[npixel]
    
    value_name = 'pixel_value'
    dat = temporary(img_value)
    ainfo = {$
        fieldnam: '1-D brightness value for the good pixels', $
        units: '#', $
        depend_0: utname, $
        depend_1: index_name, $
        var_type: 'data'}
    scdfwrite, file, value_name, value=dat, attribute=ainfo, cdftype='CDF_FLOAT', $
        compress=compress, dimvary=[1], dimensions=[npixel]
    
    elev_name = 'pixel_elev'
    dat = temporary(img_elev)
    ainfo = {$
        fieldnam: '1-D elevation for the good pixels', $
        units: 'deg', $
        depend_0: utname, $
        depend_1: index_name, $
        var_type: 'data'}
    scdfwrite, file, elev_name, value=dat, attribute=ainfo, cdftype='CDF_FLOAT', $
        compress=compress, dimvary=[1], dimensions=[npixel]
    

end

date = time_double('2014-08-28/10:00')
site = 'whit'
themis_gen_mltimg_per_site, date, site=site, min_elev=5
end
