;+
; Generate spice product file for a day.
;
; time. A time in UT sec. Only time[0] is used to determine the day.
; probe=. A string of 'a' or 'b'.
; filename=. A string to set the output file name.
;
; To replace rbsp_gen_spice_product. Need to regenerate from 2012-09-25 to 2018-09-18.
;-
pro rbsp_read_spice_gen_file_v05, time, probe=probe, $
    filename=file, errmsg=errmsg

;---Check inputs.
    if n_elements(file) eq 0 then begin
        errmsg = handle_error('No output file ...')
        return
    endif

    if n_elements(probe) eq 0 then begin
        errmsg = handle_error('No input probe ...')
        return
    endif

    if n_elements(time) eq 0 then begin
        errmsg = handle_error('No input time ...')
        return
    endif


;---Constants and settings.
    secofday = 86400d
    deg = 180d/!dpi
    rad = !dpi/180
    re = 6378d & re1 = 1d/re
    errmsg = ''
    common_time_step = 1d      ; sec.


    ; Derived settings.
    date = time[0]-(time[0] mod secofday)
    time_range = date+[0,secofday]
    prefix = 'rbsp'+probe+'_'


;---Init file.
    out_dir = fgetpath(file)
    if file_test(out_dir,/directory) eq 0 then file_mkdir, out_dir
    data_file = file
    if file_test(data_file) eq 1 then file_delete, data_file  ; overwrite old files.
    cdf_id = cdf_create(data_file)
    ginfo = dictionary($
        'TITLE', 'RBSP position and boom direction from SPICE kernel', $
        'TEXT', 'Generated by Sheng Tian at the University of Minnesota' )
    cdf_save_setting, ginfo, filename=cdf_id


;---Save common_times.
    ; Need to overlapping with next day for interpolation purpose.
    common_times = make_bins(time_range, common_time_step)
    utname = 'Epoch'
    data = stoepoch(common_times,'unix')
    settings = dictionary($
        'FIELDNAM', 'Epoch', $
        'UNITS', 'ms', $
        'VAR_TYPE', 'support_data' )
    cdf_save_var, utname, value=data, filename=cdf_id, cdf_type='CDF_EPOCH'
    cdf_save_setting, settings, var=utname, filename=cdf_id



;---Load spice kernels for all times.
    defsysv,'!rbsp_spice', exists=flag
    if flag eq 0 then rbsp_load_spice_kernel

    ; Prepare epochs used for q_uvw2gsm.
    scid = strupcase(prefix+'science')
    cspice_str2et, time_string(common_times[0], tformat='YYYY-MM-DDThh:mm:ss.ffffff'), epoch0
    epochs = epoch0+common_times-common_times[0]

    ; Get r_gsm, v_gsm, and q_uvw2gsm.
    coord = 'gsm'
    cap_coord = strupcase(coord)
    suffix = '_'+coord
    rbsp_load_spice_state, probe=probe, coord=cap_coord, times=common_times, /no_spice_load

    ; r_gsm.
    vname = prefix+'r'+suffix
    tplot_rename, prefix+'state_pos_'+coord, vname
    data = get_var_data(vname)*re1
    store_data, vname, common_times, data
    settings = dictionary($
        'FIELDNAM', 'R '+cap_coord, $
        'UNITS', 'Re', $
        'VAR_TYPE', 'data', $
        'DEPEND_0', utname )
    cdf_save_var, vname, value=data, filename=cdf_id
    cdf_save_setting, settings, var=vname, filename=cdf_id

    ; v_gsm.
    vname = prefix+'v'+suffix
    tplot_rename, prefix+'state_vel_'+coord, vname
    data = get_var_data(vname)
    settings = dictionary($
        'FIELDNAM', 'V '+cap_coord, $
        'UNITS', 'km/s', $
        'VAR_TYPE', 'data', $
        'DEPEND_0', utname )
    cdf_save_var, vname, value=data, filename=cdf_id
    cdf_save_setting, settings, var=vname, filename=cdf_id

    ; q_uvw2gsm.
    cspice_pxform, scid, cap_coord, epochs, muvw
    muvw = transpose(muvw)  ; [n,3,3].
    data = mtoq(muvw)
    vname = prefix+'q_uvw2'+coord
    settings = dictionary($
        'FIELDNAM', 'Q UVW2'+cap_coord, $
        'UNITS', '#', $
        'VAR_TYPE', 'data', $
        'DEPEND_0', utname )
    cdf_save_var, vname, value=data, filename=cdf_id
    cdf_save_setting, settings, var=vname, filename=cdf_id

    ; r_gse.
    vname = prefix+'r_gse'
    cotrans, prefix+'r_gsm', vname, /GSM2GSE
    data = get_var_data(vname)
    settings = dictionary($
        'FIELDNAM', 'R GSE', $
        'UNITS', 'Re', $
        'VAR_TYPE', 'data', $
        'DEPEND_0', utname )
    cdf_save_var, vname, value=data, filename=cdf_id
    cdf_save_setting, settings, var=vname, filename=cdf_id

    ; v_gse.
    vname = prefix+'v_gse'
    cotrans, prefix+'v_gsm', vname, /GSM2GSE
    data = get_var_data(vname)
    settings = dictionary($
        'FIELDNAM', 'V GSE', $
        'UNITS', 'km/s', $
        'VAR_TYPE', 'data', $
        'DEPEND_0', utname )
    cdf_save_var, vname, value=data, filename=cdf_id
    cdf_save_setting, settings, var=vname, filename=cdf_id

    ; q_uvw2gse.
    uvw = constant('uvw')
    muvw2gse = muvw
    foreach component, uvw, ii do begin
        vec_gsm = prefix+component+'_gsm'
        store_data, vec_gsm, common_times, muvw[*,*,ii]
        vec_gse = prefix+component+'_gse'
        cotrans, vec_gsm, vec_gse, /GSM2GSE
        muvw2gse[*,*,ii] = get_var_data(vec_gse)
    endforeach
    data = mtoq(muvw2gse)
    vname = prefix+'q_uvw2gse'
    settings = dictionary($
        'FIELDNAM', 'Q UVW2GSE', $
        'UNITS', '#', $
        'VAR_TYPE', 'data', $
        'DEPEND_0', utname )
    cdf_save_var, vname, value=data, filename=cdf_id
    cdf_save_setting, settings, var=vname, filename=cdf_id


    ; MLT.
    vname = prefix+'mlt'
    r_gse = get_var_data(prefix+'r_gse')
    data = atan(r_gse[*,1],r_gse[*,0])*deg/15
    settings = dictionary($
        'FIELDNAM', 'MLT', $
        'UNITS', 'hr', $
        'VAR_TYPE', 'data', $
        'DEPEND_0', utname )
    cdf_save_var, vname, value=data, filename=cdf_id
    cdf_save_setting, settings, var=vname, filename=cdf_id

    ; MLat.
    vname = prefix+'mlat'
    cotrans, prefix+'r_gsm', prefix+'r_sm', /GSM2SM
    r_sm = get_var_data(prefix+'r_sm')
    mlat = atan(r_sm[*,2],sqrt(r_sm[*,0]^2+r_sm[*,1]^2))
    data = mlat*deg
    settings = dictionary($
        'FIELDNAM', 'MLat', $
        'UNITS', 'deg', $
        'VAR_TYPE', 'data', $
        'DEPEND_0', utname )
    cdf_save_var, vname, value=data, filename=cdf_id
    cdf_save_setting, settings, var=vname, filename=cdf_id

    ; lshell.
    vname = prefix+'lshell'
    dis = snorm(r_gse)
    data = dis/(cos(mlat)^2)
    settings = dictionary($
        'FIELDNAM', 'L', $
        'UNITS', '#', $
        'VAR_TYPE', 'data', $
        'DEPEND_0', utname )
    cdf_save_var, vname, value=data, filename=cdf_id
    cdf_save_setting, settings, var=vname, filename=cdf_id


    cdf_close, cdf_id

end


time = time_double(['2014-01-01'])
probe = 'a'
file = join_path([homedir(),'test.cdf'])
rbsp_read_spice_gen_file, time, probe=probe, $
    filename=file, errmsg=errmsg
end
