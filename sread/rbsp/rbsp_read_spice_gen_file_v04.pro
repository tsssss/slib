;+
; Generate spice product file for a day.
;
; time. A time in UT sec. Only time[0] is used to determine the day.
; probe=. A string of 'a' or 'b'.
; filename=. A string to set the output file name.
;
; To replace rbsp_gen_spice_product. Need to regenerate from 2012-09-25 to 2018-09-18.
;-
pro rbsp_read_spice_gen_file_v04, time, probe=probe, $
    filename=file, errmsg=errmsg
    ; In this version, GSM and GSE are saved in one file and both are generated from spice.

;---Check inputs.
    if n_elements(file) eq 0 then begin
        errmsg = handle_error('No output file ...')
        return
    endif

    if n_elements(probe) eq 0 then begin
        errmsg = handle_error('No input probe ...')
        return
    endif

    if n_elements(time) eq 0 then begin
        errmsg = handle_error('No input time ...')
        return
    endif


;---Constants and settings.
    secofday = 86400d
    deg = 180d/!dpi
    rad = !dpi/180
    re = 6378d & re1 = 1d/re
    errmsg = ''
    common_time_step = 1d      ; sec.


    ; Derived settings.
    date = time[0]-(time[0] mod secofday)
    time_range = date+[0,secofday]
    prefix = 'rbsp'+probe+'_'


;---Init file.
    out_dir = fgetpath(file)
    if file_test(out_dir,/directory) eq 0 then file_mkdir, out_dir
    data_file = file
    if file_test(data_file) eq 1 then file_delete, data_file  ; overwrite old files.
    ginfo = {$
        title: 'RBSP position and boom direction from SPICE kernel',$
        text: 'Generated by Sheng Tian at the University of Minnesota'}
    scdfwrite, data_file, gattribute=ginfo



;---Save common_times.
    ; Need to overlapping with next day for interpolation purpose.
    common_times = make_bins(time_range, common_time_step)
    utname = 'time'
    data = common_times
    ainfo = {$
        fieldnam: 'unix timestamp', $
        units: 'sec', $
        var_type: 'support_data'}
    scdfwrite, data_file, utname, value=data, attribute=ainfo, cdftype='CDF_DOUBLE'



;---Load spice kernels for all times.
    defsysv,'!rbsp_spice', exists=flag
    if flag eq 0 then rbsp_load_spice_kernel

    ; Prepare epochs used for q_uvw2coord.
    scid = strupcase(prefix+'science')
    cspice_str2et, time_string(common_times[0], tformat='YYYY-MM-DDThh:mm:ss.ffffff'), epoch0
    epochs = epoch0+common_times-common_times[0]

    ; Get r_coord, v_coord, and q_uvw2coord.
    foreach coord, ['gsm','gse'] do begin
        cap_coord = strupcase(coord)
        suffix = '_'+coord

        rbsp_load_spice_state, probe=probe, coord=cap_coord, times=common_times, /no_spice_load

    ;---r_coord.
        r_var = prefix+'r'+suffix
        tplot_rename, prefix+'state_pos_'+coord, r_var
        r_coord = get_var_data(r_var)*re1
        store_data, r_var, common_times, r_coord

        tdat = r_coord
        ainfo = {$
            fieldnam: 'R '+cap_coord, $
            units: 'Re', $
            var_type: 'data', $
            depend_0: utname}
        scdfwrite, data_file, r_var, value=transpose(tdat), attribute=ainfo, dimensions=[3], dimvary=[1]

    ;---v_coord.
        v_var = prefix+'v'+suffix
        tplot_rename, prefix+'state_vel_'+coord, v_var
        v_coord = get_var_data(v_var)
        tdat = v_coord
        ainfo = {$
            fieldnam: 'V '+cap_coord, $
            units: 'km/s', $
            var_type: 'data', $
            depend_0: utname}
        scdfwrite, data_file, v_var, value=transpose(tdat), attribute=ainfo, dimensions=[3], dimvary=[1]

    ;---q_uvw2coord.
        cspice_pxform, scid, cap_coord, epochs, muvw
        quvw = mtoq(transpose(muvw))

        vname = prefix+'q_uvw2'+coord
        tdat = transpose(quvw)
        ainfo = {$
            fieldnam: 'Q UVW2'+cap_coord, $
            var_type: 'data', $
            depend_0: utname}
        scdfwrite, data_file, vname, value=tdat, attribute=ainfo, dimensions=[4], dimvary=[1]
    endforeach

    ; MLT.
    vname = prefix+'mlt'
    r_gse = get_var_data(prefix+'r_gse')
    tdat = atan(r_gse[*,1],r_gse[*,0])*deg/15
    ainfo = {$
        fieldnam: 'MLT', $
        units: 'hr', $
        var_type: 'data', $
        depend_0: utname}
    scdfwrite, data_file, vname, value=tdat, attribute=ainfo

    ; MLat.
    vname = prefix+'mlat'
    r_gsm = get_var_data(prefix+'r_gsm')
    r_sm = cotran(r_gsm, common_times, 'gsm2sm')
    mlat = atan(r_sm[*,2],sqrt(r_sm[*,0]^2+r_sm[*,1]^2))
    tdat = mlat*deg
    ainfo = {$
        fieldnam: 'MLat', $
        units: 'deg', $
        var_type: 'data', $
        depend_0: utname}
    scdfwrite, data_file, vname, value=tdat, attribute=ainfo

    ; lshell.
    vname = prefix+'lshell'
    dis = snorm(r_gsm)
    tdat = dis/(cos(mlat)^2)
    ainfo = {$
        fieldnam: 'L', $
        units: '#', $
        var_type: 'data', $
        depend_0: utname}
    scdfwrite, data_file, vname, value=tdat, attribute=ainfo


end


time = time_double(['2013-07-19','2013-07-20'])
probe = 'a'
file = join_path([homedir(),'test.cdf'])
rbsp_read_spice_gen_file, time, probe=probe, $
    filename=file, errmsg=errmsg
end
