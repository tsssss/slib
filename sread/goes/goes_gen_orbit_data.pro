;+
; Generate GOES data for certain probe for 1 day.
;-

pro goes_gen_orbit_data, date, probe=probe, file=file, errmsg=errmsg

;——-Constant.
    secofday = 86400d
    re = 6378d & re1 = 1d/re


;——-Settings.
    if n_elements(date) eq 0 then begin
        errmsg = handle_error('No input time ...')
        return
    endif

    if n_elements(probe) ne 1 then begin
        errmsg = handle_error('Wrong probe input ...')
        return
    endif

    pre0 = 'g'+probe

    if n_elements(file) eq 0 then begin
        loc_root = join_path([data_root_dir(),'sdata','goes'])
        version = 'v01'
        base_pattern = pre0+'_orbit_%Y_%m%d_'+version+'.cdf'
        local_pattern = join_path([loc_root, pre0, 'orbit', '%Y'])
        base_name = apply_time_to_pattern(base_pattern, date)
        local_path = apply_time_to_pattern(local_pattern, date)
        file = join_path([local_path,base_name])
    endif
    if file_test(file) eq 1 then file_delete, file


;---Get data and save to file.
    utr = date+[0,secofday]
    pos = goes_load_pos(trange=time_string(utr), probe=probe, coord_sys='gsm')

    ginfo = {$
        title: 'GOES position in GSM from SSC online request',$
        text: 'Generated by Sheng Tian at the University of Minnesota'}
    scdfwrite, file, gattribute=ginfo

    ut0s = pos.time
    rgsms = pos.pos_values*re1
    ut1s = smkarthm(utr[0],utr[1],60,'dx')
    rgsms = sinterpol(rgsms, ut0s, ut1s)

    ; utsec.
    utname = 'ut_pos'
    ainfo = {$
        fieldnam: 'UT time', $
        units: 'sec', $
        var_type: 'support_data'}
    scdfwrite, file, utname, value=ut1s, attribute=ainfo, cdftype='CDF_DOUBLE'

    ; rgsm.
    posname = 'pos_gsm'
    tdat = rgsms
    ainfo = {$
        fieldnam: 'R GSM', $
        units: 'Re', $
        var_type: 'data', $
        depend_0: utname}
    scdfwrite, file, posname, value=transpose(tdat), attribute=ainfo, dimensions=[3], dimvary=[1]

end

utr0 = time_double(['2017-01-01','2018-01-01'])
secofday = 86400d
days = smkarthm(utr0[0],utr0[1],secofday,'dx')
probes = ['13','14','15']
foreach probe, probes do $
    foreach date, days do $
        goes_gen_orbit_data, date, probe=probe, errmsg=errmsg

end

; Below are backups for the old goes_read_orbit, which request GOES orbit from sscweb. Now I use CDAWeb, which is much more stable.

;+
; Read GOES position in GSM. Save as 'gxx_r_gsm'
;
; time. A time or a time range in ut time. Set time to find files
;   automatically, or set files to read data in them directly.
; id=. A string sets the data type to read. Check supported ids by setting
;   print_datatype.
; print_datatype=. A boolean. Set to print all supported ids.
; probe=. A string set the probe to read data for.
; local_root=. A string to set the local root directory.
; remote_root=. A string to set the remote root directory.
; local_files=. A string or an array of N full file names. Set to fine
;   tuning the files to read data from.
; file_times=. An array of N times. Set to fine tuning the times of the files.
; version=. A string to set specific version of files. By default, the
;   program finds the files of the highest version.
;
; Need spedas to run.
;-
pro goes_read_orbit_internal, time, id=datatype, probe=probe, $
    print_datatype=print_datatype, errmsg=errmsg, $
    local_files=files, file_times=file_times, version=version, $
    local_root=local_root, remote_root=remote_root

    compile_opt idl2
    on_error, 0
    errmsg = ''

;---Check inputs.
    sync_threshold = 0  ; no need to check sync time.
    if n_elements(probe) eq 0 then probe = 'x'
    if n_elements(local_root) eq 0 then local_root = join_path([data_root_dir(),'sdata','goes'])
    if n_elements(version) eq 0 then version = 'v01'

;---Init settings.
    type_dispatch = hash()
    ; Orbit data, generated by goes_gen_orbit_data.
    base_name = 'g'+probe+'_orbit_%Y_%m%d_'+version+'.cdf'
    local_path = [local_root,'g'+probe,'orbit','%Y']
    type_dispatch['orbit'] = dictionary($
        'pattern', dictionary($
            'local_file', join_path([local_path,base_name]), $
            'local_index_file', join_path([local_path,default_index_file()])), $
        'sync_threshold', sync_threshold, $
        'cadence', 'day', $
        'extension', fgetext(base_name), $
        'var_list', list($
            dictionary($
            'in_vars', ['pos_gsm'], $
            'out_vars', ['g'+probe+'_r_gsm'], $
            'time_var_name', 'ut_pos', $
            'time_var_type', 'unix')))

    if keyword_set(print_datatype) then begin
        print, 'Suported data type: '
        ids = type_dispatch.keys()
        foreach id, ids do print, '  * '+id
        return
    endif


;---Dispatch patterns.
    if n_elements(datatype) eq 0 then begin
        errmsg = handle_error('No input datatype ...')
        return
    endif
    if not type_dispatch.haskey(datatype) then begin
        errmsg = handle_error('Do not support type '+datatype+' yet ...')
        return
    endif
    request = type_dispatch[datatype]

;---Find files, read variables, and store them in memory.
    files = prepare_files(request=request, errmsg=errmsg, local_files=files, $
        file_times=file_times, time=time, nonexist_files=nonexist_files)

;---Read data from files and save to memory.
    read_files, time, files=files, request=request

end

pro goes_read_orbit, utr0, probe=probe, errmsg=errmsg

    if n_elements(probe) eq 0 then begin
        errmsg = handle_error('No input probe ...')
        return
    endif

    re = 6378d
    re1 = 1d/re
    goes_read_orbit_internal, utr0, id='orbit', probe=probe, errmsg=errmsg
    if errmsg ne '' then return

    var = 'g'+probe+'_r_gsm'
    settings = { $
        display_type: 'vector', $
        unit: 'Re', $
        short_name: 'R', $
        coord: 'GSM', $
        coord_labels: ['x','y','z'], $
        colors: [6,4,2]}
    add_setting, var, settings, /smart


end


utr0 = time_double(['2014-08-28/05:00','2014-08-28/06:00'])
goes_read_orbit, utr0, probe='13'
end
